{"version":3,"sources":["components/dashboard/search/Search.js","components/dashboard/artist-banner/ArtistBanner.js","components/dashboard/album-grid/AlbumGrid.js","components/dashboard/album-songs/AlbumSongs.js","components/dashboard/track-player/TrackPlayer.js","components/dashboard/dashboard.js","services/api.spotify.js","components/app/App.js","serviceWorker.js","index.js"],"names":["SearchBar","Component","props","react_default","a","createElement","type","placeholder","SearchResult","ArtistBanner","AlbumGrid","AlbumSongs","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","songs","name","map","song","TrackPlayer","Dashboard","AppBar","position","color","Toolbar","Search_SearchBar","style","flex","className","Search_SearchResult","artist_banner_ArtistBanner","AlbumGrid_AlbumGrid","AlbumSongs_AlbumSongs","TrackPlayer_TrackPlayer","authorizeSpotify","console","log","config","URLS","queryParams","response_type","spotify","authorize","params","values","default","client_id","redirect_uri","url","parameters","qs","key","hasOwnProperty","value","encodeURIComponent","length","substring","buildUrl","window","location","App","hash","split","reduce","initial","item","parts","decodeURIComponent","_token","access_token","react_router_dom","height","react_router","path","component","Boolean","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ac186d8.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Search extends Component {\n    render() {\n        return (\n            <div>\n                <SearchBar></SearchBar>\n                <SearchResult></SearchResult>\n            </div>\n        )\n    }\n}\n\n\nexport const SearchBar = (props) => (\n    <input type=\"text\" placeholder=\"search\" />\n)\n\nexport const SearchResult = (props) => (\n    <div>Search results</div>\n)\n","import React from 'react'\n\n const ArtistBanner = (props) => (\n    <div>Artist Banner</div>\n)\n\nexport default ArtistBanner;","import React, { Component } from 'react'\n\nexport default class AlbumGrid extends Component {\n    render() {\n        return (\n            <div>\n                Album Grid\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class AlbumSongs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            songs : [\n                {\n                    name : 'song 1',\n                },\n                {\n                    name : 'song 2',\n                }\n            ]\n        }\n    }\n    \n    render() {\n        return (\n            <div>\n                {this.state.songs && \n                    <ul>\n                        {this.state.songs.map((song) => {\n                            return <li>\n                                song.name\n                            </li>\n                        })}\n                    </ul>\n                }\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class TrackPlayer extends Component {\n    render() {\n        return (\n            <div>\n                Track Player\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport \"./dashboard.css\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport { Toolbar, IconButton } from \"@material-ui/core\";\nimport { SearchResult , SearchBar} from \"./search/Search\";\nimport ArtistBanner from './artist-banner/ArtistBanner'\nimport AlbumGrid from './album-grid/AlbumGrid'\nimport AlbumSongs from './album-songs/AlbumSongs'\nimport TrackPlayer from './track-player/TrackPlayer'\n\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n\t};\n\t\n  }\n\n  render() {\n\n\n    return (\n      <div>\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar >\n\t\t\t  <SearchBar></SearchBar>\n\t\t\t  <div style={{flex : '1'}}></div>\n\t\t  </Toolbar>\n        </AppBar>\n        <div className=\"dash-container\">\n          <div className=\"search-container\">\n            <SearchResult />\n          </div>\n\t\t  <div className=\"artist-container\">\n\t\t\t  <div className=\"artist-banner\">\n\t\t\t  \t<ArtistBanner></ArtistBanner>\n\t\t\t  </div>\n\t\t\t  \n\t\t\t  <div className=\"album-container\">\n\t\t\t\t  <div className=\"album-grid\">\n\t\t\t\t\t<AlbumGrid></AlbumGrid>\n\t\t\t\t  </div>\n\t\t\t\t  <div className=\"album-songs\">\n\t\t\t\t\t<AlbumSongs></AlbumSongs>\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t  </div>\n\t\t  <div className=\"track-player\">\n\t\t\t  <TrackPlayer></TrackPlayer>\n\t\t  </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import config from '../config/config';\nimport URLS from '../constants/URLS.json';\n\n\n\nexport const authorizeSpotify = () => {\n    console.log('config')\nconsole.log(config);\n\nconsole.log('URLS')\nconsole.log(URLS);\n    // make an authorize call to spotify\n    \n    let queryParams = {\n        response_type : URLS.spotify.authorize.params.values.response_type.default,\n        client_id : config.spotify.client_id,\n        redirect_uri : URLS.spotify.authorize.params.values.redirect_uri.default\n    }\n    let url = buildUrl(URLS.spotify.authorize.url , queryParams);\n    window.location = url;\n    // var headers = new Headers();\n    // // headers.append('Access-Control-Allow-Origin', \"*\");\n    // console.log(url);\n    // fetch(url , {\n    //     method : 'GET',\n    //     mode : 'cors'\n    // })\n    // .then(res => res.json())\n    // .then(response => console.log(response))\n    // .catch(err => console.log(err));\n}\n\n\nfunction buildUrl(url, parameters) {\n    let qs = \"\";\n    for (const key in parameters) {\n        if (parameters.hasOwnProperty(key)) {\n            const value = parameters[key];\n            qs +=\n                key + \"=\" + encodeURIComponent(value) + \"&\";\n                // encodeURIComponent(key) + \"=\" + encodeURIComponent(value) + \"&\";\n        }\n    }\n    if (qs.length > 0) {\n        qs = qs.substring(0, qs.length - 1); //chop off last \"&\"\n        url = url + \"?\" + qs;\n    }\n\n    return url;\n}","import React from \"react\";\nimport \"./App.css\";\nimport Dashboard from \"../dashboard/dashboard.js\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport {authorizeSpotify} from '../../services/api.spotify';\n\nfunction App() {\n  var authUser = null;\n  const hash = window.location.hash\n.substring(1)\n.split('&')\n.reduce(function (initial, item) {\n  if (item) {\n    var parts = item.split('=');\n    initial[parts[0]] = decodeURIComponent(parts[1]);\n  }\n  return initial;\n}, {});\nwindow.location.hash = '';\n\n// Set token\nlet _token = hash.access_token;\nif(!_token){\n\tauthorizeSpotify();\n}else{\n  // set token in localstorage and redux store\n  console.log(_token);\n}\n  return (\n    <Router style={{ height: \"100%\" }}>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nReactDOM.render(\n    \n        <App /> \n        \n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}